<?php
/**
 * Created by PhpStorm.
 * User: AmauryD
 * Date: 18-04-18
 * Time: 11:07
 */

namespace Framework\Controller;


use Framework\Database\DatabaseConnection;
use Framework\Database\QueryBuilder\Condition;
use Framework\Database\QueryBuilder\QueryBuilder;
use framework\Exception\MissingParamException;
use Framework\Exception\NotFoundException;
use framework\Exception\WrongMethodException;
use Framework\Model\Entity\Topic;
use template\Controller\BaseController;

class TopicsController extends BaseController
{
    protected function initialize()
    {
        // delete all these outdated topics everytime the controller is loaded
        DatabaseConnection::query("DELETE FROM topics WHERE topics.expires < CURRENT_TIMESTAMP");
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    protected function isAuthorized()
    {
        if (!isset($_SESSION['user']))
            return false;
        return parent::isAuthorized(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws MissingParamException
     * @throws WrongMethodException
     * @throws \Exception
     */
    public function delete()
    {
        $this->noView();
        $id = $this->request->getParameter('id');

        if (!$id) throw new MissingParamException("Parameter id is not set");

        $topic = $this->model->get($id);

        if (empty($topic)) throw new NotFoundException("Topic does not exists");

        if ($topic->get('user_id') !== $_SESSION['user']->get('id'))
        {
            $this->view->flash("You're not the owner");
            $this->redirect($this->referer);
        }

        if ($this->request->is('post')) {
            $topic = $this->model->get($id);
            try {
                $topic->delete();
                $this->view->flash("Topic #{$topic->get('id')} was successfully deleted");
                $this->redirect(['controller' => 'topics', 'action' => 'index', 'params' => [$topic->get('category_id')]]);
            } catch (\Exception $exception) {
                $this->view->flash("Cannot delete post #{$topic->get('id')}", "error");
            }
        } else {
            throw new WrongMethodException();
        }
    }

    /**
     * @throws \Exception
     */
    public function index()
    {
        $id = $this->request->getParameter('id');

        if (!$id) throw new MissingParamException("Parameter id is not set");

        if (!$this->loadModel('categories')->exists($id)) throw new NotFoundException();

        $topics = $this->model->select(QueryBuilder::select()->columns(['topics.creation', 'topics.id', 'topics.name', 'posts.id', 'users.firstname'])
                ->where(Condition::make('category_id'))
                ->join('posts', 'topics.id', 'posts.topic_id', 'LEFT')
                ->join('users', 'topics.user_id', 'users.id')
                ->orderBy('topics.creation')
            , [$id]
        );

        $this->view->set('forum_id', $id);
        $this->view->set('topics', $topics);
    }

    /**
     *
     */
    public function add()
    {
        if ($this->request->is('post')) {
            $user_id = $_SESSION['user']->get('id');
            $category_id = $this->request->getParameter('id');
            $content = $this->request->getParameter('content');
            $name = $this->request->getParameter('name');
            $date = $this->request->getParameter('date');
            $time = $this->request->getParameter('time');

            $expires = $date . " " . $time;

            // that's working , uh ?
            if (empty(trim($expires)))
                $expires = null;

            $insertData = compact('user_id', 'category_id', 'name', 'content', 'expires');

            $validation = $this->validate($insertData);

            if ($validation->hasErrors()) {
                foreach ($validation->errors() as $error)
                    $this->view->flash($error[0][1], "error");
                return;
            }

            $topic = new Topic($insertData);

            try {
                $topic->save();
                $this->view->flash('Topic created successfully');
                $this->redirect(['action' => 'index', 'params' => [$category_id]]);
            } catch (\Exception $e) {
                $this->view->flash("Cannot save topic", "error");
            }
        }
    }

    /**
     * @throws \Exception
     */
    public function edit()
    {
        $id = $this->request->getParameter('id');

        if (!$id) throw new MissingParamException("Parameter id is not set");

        $topic = $this->model->get($id);

        if (empty($topic)) throw new NotFoundException("Topic does not exists");

        if ($topic->get('user_id') !== $_SESSION['user']->get('id'))
        {
            $this->view->flash("You're not the owner");
            $this->redirect($this->referer);
        }

        if ($this->request->is('post')) {
            $user_id = $_SESSION['user']->get('id');
            $category_id = $topic->get('category_id');
            $content = $this->request->getParameter('content');
            $name = $this->request->getParameter('name');

            $insertData = compact('user_id', 'category_id', 'name', 'content');

            $validation = $this->validate($insertData);

            if ($validation->hasErrors()) {
                foreach ($validation->errors() as $error)
                    $this->view->flash($error[0][1], "error");
                return;
            }

            $topic->set($insertData);

            try {
                $topic->save();
                $this->view->flash('Topic edited successfully');
                $this->redirect(['action' => 'view', 'params' => [$id]]);
            } catch (\Exception $e) {
                $this->view->flash("Cannot save topic", "error");
            }
        }

        $this->view->set('topic', $topic);
    }

    /**
     * @throws \Exception
     */
    public function view()
    {
        $id = $this->request->getParameter('id');

        if (!$id) throw new MissingParamException("Parameter id is not set");

        if (!$this->model->exists($id)) throw new NotFoundException();

        $postsModel = $this->loadModel('posts');

        $topic = $this->model->select(QueryBuilder::select()->columns(['topics.name', 'topics.content', 'topics.user_id', 'topics.id', 'users.firstname'])
                ->where(Condition::make('topics.id'))
                ->join('posts', 'topics.id', 'posts.topic_id', 'LEFT')
                ->join('users', 'topics.user_id', 'users.id')
            , [$id])[0];

        $posts = $postsModel->select(QueryBuilder::select()->columns(['posts.id', 'posts.content', 'users.firstname', 'users.id'])
                ->where(Condition::make('topic_id'))
                ->join('users', 'posts.user_id', 'users.id')
            , [$topic->get('id')]
        );

        $this->view->set('posts', $posts);
        $this->view->set('topic', $topic);
    }
}